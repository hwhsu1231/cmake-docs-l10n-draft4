# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: use-sphinx-update-pot

on:
  workflow_call:
    inputs:
      VERSION:
        type: string
        required: true
      LANGUAGE:
        type: string
        required: true
      UPDATE_MODE:
        type: string
        required: true
      CALLER_JOB:
        type: string
        required: true
      ENABLE_JOB:
        type: boolean
        required: true
      CREATE_PR:
        type: boolean
        required: true

jobs:
  sphinx-update-pot:
    #  Don't run on forked repos.
    if: (inputs.ENABLE_JOB && github.repository_owner == 'hwhsu1231')
    runs-on: ubuntu-latest
    steps:
      - name: Check Contexts, Inputs, and Secrets
        shell: bash
        run: |
          echo "[Contexts]"
          echo "github.job = ${{ github.job }}"
          echo "github.ref = ${{ github.ref }}"
          echo "github.ref_name = ${{ github.ref_name }}"
          echo "github.event.action = ${{ github.event.action }}"
          echo "github.event.number = ${{ github.event.number }}"
          echo "github.event_name = ${{ github.event_name }}"
          echo "[Inputs]"
          echo "inputs.VERSION = ${{ inputs.VERSION }}"
          echo "inputs.LANGUAGE = ${{ inputs.LANGUAGE }}"
          echo "inputs.UPDATE_MODE = ${{ inputs.UPDATE_MODE }}"
          echo "inputs.CALLER_JOB = ${{ inputs.CALLER_JOB }}"
          echo "inputs.ENABLE_JOB = ${{ inputs.ENABLE_JOB }}"
          echo "inputs.CREATE_PR = ${{ inputs.CREATE_PR }}"
          echo "[Secrets]"
          echo "secrets.GITHUB_TOKEN = ${{ secrets.GITHUB_TOKEN }}"
          echo "secrets.CROWDIN_PERSONAL_TOKEN = ${{ secrets.CROWDIN_PERSONAL_TOKEN }}"
          echo "secrets.APP_ID = ${{ secrets.APP_ID }}"
          echo "secrets.APP_PRIVATE_KEY = ${{ secrets.APP_PRIVATE_KEY }}"

      - name: Get the GitHub App's Token
        uses: tibdex/github-app-token@v2
        id: ggat
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout to '${{ github.ref }}'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          token: ${{ steps.ggat.outputs.token }}
          submodules: true

      - name: Get Other Fields from matrix.json
        id: gofm
        shell: bash
        run: |
          get_keys() {
            jq -r ".include[0] | keys[] | select(. != \"VERSION\")" .github/workflows/matrix.json
          }
          declare -A VERSION_FILTERS
          for KEY in $(get_keys); do
            VERSION_FILTERS[$KEY]=".include[] | select(.VERSION == \"${{ inputs.VERSION }}\") | .$KEY"
          done
          for KEY in "${!VERSION_FILTERS[@]}"; do
            FILTER="${VERSION_FILTERS[$KEY]}"
            VALUE=$(jq -r "$FILTER" .github/workflows/matrix.json)
            if [ "$VALUE" = "null" ]; then VALUE=""; fi
            echo "${KEY}=$VALUE" >> $GITHUB_OUTPUT
            echo "${KEY}: $VALUE"
          done

      - name: Install CMake 3.23
        uses: jwlawson/actions-setup-cmake@v2.0
        with:
          cmake-version: '3.23'

      - name: Install Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Gettext
        shell: bash
        run: |
          sudo apt-get install gettext && xgettext --version

      - name: Configure with '${{ inputs.LANGUAGE }}' preset for '${{ inputs.VERSION }}' version
        shell: bash
        run: |
          cmake \
            --preset ${{ inputs.LANGUAGE }} \
            -D VERSION=${{ inputs.VERSION }} \
            -D UPDATE_MODE=${{ inputs.UPDATE_MODE }} \
            -D AUTO_DEPEND=OFF

      - name: Get POT_BEFORE from reference.json
        id: gpbr
        shell: bash
        run: |
          POT_BEFORE=$(jq '.pot' l10n/${{ inputs.VERSION }}/reference.json)
          delimiter="$(openssl rand -hex 8)"
          echo "POT_BEFORE<<$delimiter" >> $GITHUB_OUTPUT
          echo "$POT_BEFORE"            >> $GITHUB_OUTPUT
          echo "$delimiter"             >> $GITHUB_OUTPUT
          echo "POT_BEFORE:"
          echo "$POT_BEFORE"

      - name: Build with 'prepare_git_repo' target
        shell: bash
        run: |
          cmake \
            --build out/build/${{ inputs.LANGUAGE }} \
            --target prepare_git_repo

      - name: Build with 'venv_pip_install' target
        shell: bash
        run: |
          cmake \
            --build out/build/${{ inputs.LANGUAGE }} \
            --target venv_pip_install

      - name: Build with 'sphinx_update_pot' target
        shell: bash
        run: |
          cmake \
            --build out/build/${{ inputs.LANGUAGE }} \
            --target sphinx_update_pot

      # Refer to:
      # - https://github.com/peter-evans/create-pull-request/issues/2634#issuecomment-1870136711
      # - https://github.com/github/docs/issues/21529
      # - https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
      - name: Get POT_AFTER from reference.json
        id: gpar
        shell: bash
        run: |
          POT_AFTER=$(jq '.pot' l10n/${{ inputs.VERSION }}/reference.json)
          delimiter="$(openssl rand -hex 8)"
          echo "POT_AFTER<<$delimiter"  >> $GITHUB_OUTPUT
          echo "$POT_AFTER"             >> $GITHUB_OUTPUT
          echo "$delimiter"             >> $GITHUB_OUTPUT
          echo "POT_AFTER:"
          echo "$POT_AFTER"

      - name: Set the Crowdin Label for the Pull Request
        id: dclpr
        shell: bash
        run: |
          VERSION="${{ inputs.VERSION }}"
          FILTER=".include | map(select(.COMPENDIUM_VERSION == null)) | .[].VERSION"
          OUTPUT=$(jq -r "$FILTER" .github/workflows/matrix.json)
          readarray -t CROWDIN_BRANCHES <<< "$OUTPUT"
          CROWDIN_LABEL=""
          for CROWDIN_BRANCH in "${CROWDIN_BRANCHES[@]}"; do
            if [ "$VERSION" == "$CROWDIN_BRANCH" ]; then
              CROWDIN_LABEL="crowdin"
              break
            fi
          done
          echo "CROWDIN_LABEL: $CROWDIN_LABEL"
          echo "CROWDIN_LABEL=$CROWDIN_LABEL" >> $GITHUB_OUTPUT

      - name: Get the Current Job's ID
        id: gcji
        uses: Tiryoh/gha-jobid-action@v1
        with:
          github_token: ${{ steps.ggat.outputs.token }}
          job_name: '${{ inputs.CALLER_JOB }} / ${{ github.job }}'
          per_page: 100

      - name: Check Outputs of the Current Job's ID
        shell: bash
        run: |
          echo "Current Job's URL = ${{ steps.gcji.outputs.html_url }}"
          echo "Current Job's ID  = ${{ steps.gcji.outputs.job_id }}"

      - name: Create a Pull Request
        id: cpr
        # if: (inputs.CREATE_PR && github.ref_name == 'source')
        if: inputs.CREATE_PR
        uses: peter-evans/create-pull-request@v6
        with:
          author: docs-l10n[bot] <157310748+docs-l10n[bot]@users.noreply.github.com>
          token: ${{ steps.ggat.outputs.token }}  # required
          # Otherwise, the following error message will show up:
          #   Pushing pull request branch to 'origin/sphinx/pot/git-master'
          #   /usr/bin/git push --force-with-lease origin sphinx/pot/git-master:refs/heads/sphinx/pot/git-master
          #   remote: Write access to repository not granted.
          #   fatal: unable to access 'https://github.com/hwhsu1231/cmake-docs-l10n-draft2/': The requested URL returned error: 403
          #   Error: The process '/usr/bin/git' failed with exit code 128
          base: ${{ github.ref_name }}
          branch: 'sphinx/pot/${{ inputs.VERSION }}'
          delete-branch: true   # Delete the branch if no need to create a PR
          title: |
            pot(${{ inputs.VERSION }}): Update pot from Sphinx
          body: |
            Created by GitHub Workflows:
            - File: [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/workflows/${{ github.workflow }}.yml)
            - Run: [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - Job: [${{ inputs.CALLER_JOB }} / ${{ github.job }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ steps.gcji.outputs.job_id }})
          commit-message: |
            pot(${{ inputs.VERSION }}): Update pot from Sphinx

            Before: ${{ steps.gpbr.outputs.POT_BEFORE }}
            After: ${{ steps.gpar.outputs.POT_AFTER }}
          draft: false
          labels: |
            gettext
            ${{ steps.dclpr.outputs.CROWDIN_LABEL }}

      - name: Check Outputs of the Pull Request
        if: steps.cpr.outputs.pull-request-number
        run: |
          echo "Pull Request Number = ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL    = ${{ steps.cpr.outputs.pull-request-url }}"

      - name: Print job info
        run: |
          echo "### ${{ inputs.CALLER_JOB }} / ${{ github.job }}"  >> $GITHUB_STEP_SUMMARY
          echo "| Key        | Value           |" >> $GITHUB_STEP_SUMMARY
          echo "| ---------- | --------------- |" >> $GITHUB_STEP_SUMMARY
          echo "| Job Name   | Job 2           |" >> $GITHUB_STEP_SUMMARY
          echo "| Status     | Success         |" >> $GITHUB_STEP_SUMMARY
          echo ""                                 >> $GITHUB_STEP_SUMMARY
